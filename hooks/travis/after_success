#!/usr/bin/env python
from __future__ import print_function
import subprocess, sys, os

print('Travis CI Passed')

branchname = 'unspecified'
output     = subprocess.check_output(['git', 'branch'])
branches   = output.decode('utf-8').splitlines()
for branch in branches:
    if '*' in branch:
        branchname = branch.replace('*', '').replace(' ', '')
        break

# Relevant:
# http://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

# Attempt to auto-merge develop into pre-beta if travis tests pass
# This code is currently unactive, but should work :)

if branchname == 'develop':
    subprocess.call(['git', 'fetch', 'origin', 'beta'])
    # origin/beta -> FETCH_HEAD
    hexOut = subprocess.check_output(['git',
                                      'merge-base',
                                      'FETCH_HEAD',
                                      'develop'])
    hexID  = hexOut.decode('utf-8').replace('\n', '')
    output = subprocess.check_output(['git',
                                      'merge-base',
                                      hexID,
                                      'develop',
                                      'FETCH_HEAD']) # View merge tree between beta and develop
    output = output.decode('utf-8', 'ignore')
    print(output)
    canMerge = '<<<<<' not in output
    if canMerge:
        print('Merge of beta into develop is possible..')
        # Commented out until approval
        '''
        subprocess.call(['git', 'merge', 'origin/beta']) #into develop
        subprocess.call(['git', 'commit', '-m', 'Merged beta into develop, as there were no conflicts'])
        #if subprocess.call(['git', 'checkout', '-b', 'pre-beta']) > 0: # If pre-beta already exists (create it otherwise)
        #    subprocess.call(['git', 'pull', 'pre-beta'])
        #... etc

        '''
    else:
        print('Potential merge conflicts found! Cannot merge beta into develop')

