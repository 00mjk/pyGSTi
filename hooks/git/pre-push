#!/usr/bin/python
from __future__       import print_function
from automation_tools import get_branchname, run_pylint, get_output
from hooksettings     import updates_git_pages
import subprocess, os, sys

if __name__ == "__main__":

    branchname = get_branchname()

    if branchname in updates_git_pages:
        subprocess.call(['bash', '.git/hooks/create_git_html']) # Create/update html on commit, push on push
        print('Updating github pages!')
        subprocess.call(['git', 'checkout', 'gh-pages'])
        print(subprocess.check_output(['pwd']))
        os.system('cp temp_html/*.html tutorials/')
        subprocess.call(['git', 'add', 'tutorials/*.html'])
        subprocess.call(['git', 'commit', '-m', '"Updates html in tutorials"'])
        subprocess.call(['git', 'push'])
        subprocess.call(['git', 'checkout', branchname])
        os.system('rm -rf temp_html') # yikes!

    passes = run_pylint(['./lint.py', '--noerrors=True']) # Can't push to origin if pylint finds any errors!
    if int(passes) > 0:
        sys.exit(1)
    '''

    output = get_output(['git', 'log', '--merges'])
    output = [line for line in output.splitlines() if line.count(branchname) < 2 and 'into %s' % branchname in line]
    with open('doc/%s_merge_log.txt' % branchname, 'w') as merge_log:
        merge_log.write('\n'.join(output))
    
    #fmt = '%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg1 = ['git', 'log', '--graph', '--abbrev-commit']#, 
            #'--decorate', '--format=format:'+fmt, '--all'] 

    output = get_output(lg1)
    output = [line for line in output.splitlines() if line.count(branchname) < 2 and 'into %s' % branchname in line]
    print('\n'.join(output))
    '''

